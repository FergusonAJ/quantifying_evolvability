random_seed = 7200;   // Seed for random number generator; use 0 to base on time.
Var num_bits = 7;    // N (number of bits in each genotype)
Var ruggedness = 2;  // K (number of additional bits considered with each gene)

Var pop_size = 128;             // Number of organisms to evaluate in the population.
Var num_gens = 1000;

Population main_pop;            // Main population for managing candidate solutions.
Population next_pop;            // Temp. population while constructing the next generation.

BitsOrg bits_org {              // Organism consisting of a series of N bits.
  output_name = "bits";         // Name of variable to contain bit sequence.
  N = num_bits;                 // Number of bits in organism
  mut_prob = 0.01;              // Probability of each bit mutating on reproduction.
  init_random = 1;              // Should we randomize ancestor?  (0 = all zeros)
};

EvalNK eval_nk {                // Evaluate bitstrings on an NK fitness lanscape.
  N = num_bits;                 // Number of bits required in output
  K = ruggedness;               // Number of bits used in each gene
  bits_trait = "bits";          // Which trait stores the bit sequence to evaluate?
  fitness_trait = "fitness";    // Which trait should we store NK fitness in?
};

SelectElite elite {             // Choose the top fitness organisms for replication.
  top_count = 5;                // Number of top-fitness orgs to be replicated
  fitness_fun = "fitness";      // Which trait provides the fitness value to use?
};

SelectTournament tournament {   // Select the top fitness organisms from random subgroups for replication.
  tournament_size = 4;          // Number of orgs in each tournament
  fitness_fun = "fitness";      // Which trait provides the fitness value to use?
};

StringUtils str_utils;

@START() {
  PRINT("random_seed = ", random_seed, "\n");  // Print seed at run start.
  eval_nk.WRITE_TO_FILE("landscape_data.csv");
  PRINT("genotype,fitness");
  Var i = 0;
  WHILE(i < (2 ** num_bits)){
    PRINT(i, ",", eval_nk.GET_FITNESS(i));
    i = i + 1;
  }
}

@UPDATE(Var ud) {
  EXIT();
}

